{
	"$id": "https://github.com/zeabur/zeabur/prebuilts/schema.json",
	"$schema": "http://json-schema.org/draft-07/schema",
	"title": "Service Specification (ServiceSpec)",
	"description": "Service Specification describes the essential information for creating a service, for example, the Docker image of a service, the variables a service should be specified, the volumes for persistent storage, etc.\n\nThe version of this schema is v4.1.1-20240415.",
	"type": "object",
	"properties": {
		"id": {
			"title": "Service ID",
			"description": "Useful for referencing this service in variables like `${SERVICE_HOST}`. When ID is not specified, we generate a ID from name.",
			"$ref": "#/definitions/ID"
		},
		"name": {
			"title": "Service name",
			"description": "The name of this service.",
			"type": "string",
			"pattern": "^[a-zA-Z]"
		},
		"description": {
			"title": "Service description",
			"description": "A short description of this service for the service user.",
			"type": "string"
		},
		"icon": {
			"title": "Service Icon",
			"description": "The icon of this service for users to identify. It shows at sidebar.",
			"type": "string",
			"pattern": "^https?://"
		},
		"docs": {
			"title": "Documentation URL",
			"description": "The documentation that thoroughly describes how to use this service.",
			"type": "string"
		},
		"source": {
			"$ref": "#/definitions/Source"
		},
		"ports": {
			"$ref": "#/definitions/Ports"
		},
		"volumes": {
			"$ref": "#/definitions/Volumes"
		},
		"instructions": {
			"$ref": "#/definitions/ConnectionInstructions"
		},
		"env": {
			"$ref": "#/definitions/Envs"
		},
		"init": {
			"$ref": "#/definitions/InitRules"
		},
		"configs": {
			"$ref": "#/definitions/Configs"
		}
	},
	"required": [
		"name",
		"source"
	],
	"additionalProperties": false,
	"definitions": {
		"Envs": {
			"title": "Map of Environment Variables",
			"description": "Declare the environment variables that are the required variables of a service (“readonly”), need users to fill in (“required”, “default”), or declare the variables that allow other services to pick value (“expose”). The key is the variable name, while the value is the variable specification.",
			"type": "object",
			"propertyNames": {
				"type": "string",
				"pattern": "^[a-zA-Z0-9_]+$"
			},
			"additionalProperties": {
				"$ref": "#/definitions/Env"
			}
		},
		"Env": {
			"title": "Environment variable",
			"description": "Declare the default value and flags of a variable.",
			"type": "object",
			"properties": {
				"required": {
					"title": "Required",
					"description": "If true, we ask users to fill the values.",
					"type": "boolean",
					"default": false
				},
				"default": {
					"title": "Default value",
					"description": "The default value of this environment variable. If not set, it leaves empty.",
					"type": "string"
				},
				"expose": {
					"title": "Expose to the whole project",
					"description": "If true, the value will be exposed to the whole project and other projects can reference it with `${VARIABLE_NAME}`.",
					"type": "boolean",
					"default": false
				},
				"readonly": {
					"title": "Modifiable",
					"description": "If true, we will not allow users to modify the value once this service is created. Useful for computed values such as hostname.",
					"type": "boolean",
					"default": false
				}
			},
			"additionalProperties": false
		},
		"Source": {
			"title": "Source",
			"description": "The base image or source to start this service. Currently, it supports only from Docker image.",
			"type": "object",
			"oneOf": [
				{
					"description": "Use the prebuilt images from Docker Registry",
					"$ref": "#/definitions/Prebuilt"
				},
				{
					"description": "Build images from the given Git repository. Unsupported in Zeabur at this moment.",
					"$ref": "#/definitions/Git"
				}
			]
		},
		"Prebuilt": {
			"title": "Prebuilt source",
			"description": "Use the images from Docker Registry as the base of this service.",
			"type": "object",
			"properties": {
				"image": {
					"title": "Image tag",
					"description": "The image reference (`namespace/image:latest`) available by `docker pull`.",
					"type": "string"
				},
				"command": {
					"title": "Overridden command",
					"description": "The command to spawn this container that will be used instead of the default one.",
					"type": "array",
					"items": {
						"type": "string"
					},
					"default": []
				},
				"args": {
					"title": "Overridden arguments",
					"description": "The arguments to Command to spawn this container that will be used instead of the default one.",
					"type": "array",
					"items": {
						"type": "string"
					},
					"default": []
				}
			},
			"additionalProperties": false,
			"required": [
				"image"
			]
		},
		"Git": {
			"title": "Git source",
			"description": "Build image from Git or GitHub.",
			"type": "object",
			"properties": {
				"source": {
					"title": "Repository URI type",
					"description": "- `GITHUB`: `user`/`repo`.\n- `GIT`: `git://somewhere/hi.git`.",
					"type": "string",
					"enum": [
						"GITHUB",
						"GIT"
					]
				},
				"repo": {
					"title": "Repository URI",
					"description": "Check `source` for the format to reference your codebase.",
					"type": "string",
					"minLength": 1
				},
				"branch": {
					"title": "Repository branch",
					"description": "The branch of the repository to build from. If not specified, the default branch will be used.",
					"type": "string"
				},
				"submoduleName": {
					"title": "Submodule name",
					"description": "Which submodule of this repository should be used as the source of this service. Check zbpack's documentation for more information. If not specified, the root directory will be used.",
					"type": "string"
				},
				"watchPaths": {
					"title": "Watch paths",
					"description": "Control which file changes in the paths will trigger redeployment. The notation refers to the format of the Gitignore file. For example, * represents that all changes will trigger deployment, /frontEnd represents that all changes within the frontEnd folder will trigger deployment.",
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			},
			"additionalProperties": false,
			"required": [
				"source",
				"repo"
			]
		},
		"Ports": {
			"title": "List of Declared ports",
			"description": "Describe which ports should be exposed to the other services in a project or even the outside world.",
			"type": "array",
			"items": {
				"$ref": "#/definitions/Port"
			}
		},
		"Port": {
			"title": "Declared port",
			"type": "object",
			"properties": {
				"id": {
					"title": "Port ID",
					"description": "The port name that follows the ID naming enforcement. It will be the name of some special variables, such as `${[SERVICE_NAME]_PORT}`.",
					"$ref": "#/definitions/ID"
				},
				"port": {
					"title": "Port number",
					"description": "The number of this port, for example, we can declare the port ID `db` exposes `3306`.",
					"type": "number",
					"minimum": 0,
					"maximum": 65535
				},
				"type": {
					"title": "Port type",
					"description": "The type of this port. Ports with `HTTP` type will be load balanced, while others are not.",
					"type": "string",
					"enum": [
						"HTTP",
						"TCP",
						"UDP"
					]
				}
			},
			"additionalProperties": false,
			"required": [
				"id",
				"port",
				"type"
			]
		},
		"ID": {
			"title": "Valid ID representation",
			"description": "ID is a string that can only contain lowercase letters, numbers and hyphens, and the length of ID is at most 63 characters.",
			"type": "string",
			"pattern": "^[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$"
		},
		"ConnectionInstructions": {
			"title": "List of connection information and instruction",
			"description": "Represent “variables” in a user-friendly text that allows users knowing to connect to this service from their services or local machines.",
			"type": "array",
			"items": {
				"$ref": "#/definitions/ConnectionInstruction"
			}
		},
		"ConnectionInstruction": {
			"title": "Connection information and instruction",
			"description": "The connection instruction is a user-friendly line of text that allows users knowing to connect to this service from their services or local machines.",
			"type": "object",
			"properties": {
				"type": {
					"title": "Instruction type",
					"description": "Is this instruction line a text, URL or password?",
					"type": "string",
					"enum": [
						"TEXT",
						"URL",
						"PASSWORD"
					]
				},
				"title": {
					"title": "Instruction title",
					"description": "The title of this instruction. It will be shown as the title of the instruction line.",
					"examples": [
						"MongoDB connection string"
					],
					"type": "string"
				},
				"content": {
					"title": "Instruction content",
					"description": "The content of this instruction. You can reference variables in this text with `${VARIABLE_NAME}`.",
					"type": "string",
					"minLength": 1
				},
				"category": {
					"title": "Instruction category",
					"description": "The category of this instruction. Useful for filtering and grouping in Instruction tab.",
					"type": "string",
					"examples": [
						"Credentials"
					]
				}
			},
			"additionalProperties": false,
			"required": [
				"type",
				"title",
				"content"
			]
		},
		"Volumes": {
			"title": "List of Persistent volumes",
			"description": "Describe the paths (“volumes”) that should be reserved/persistent across the restarts.  Since there are costs to persist data, don't use it unless you need.",
			"type": "array",
			"items": {
				"$ref": "#/definitions/VolumeEntry"
			}
		},
		"VolumeEntry": {
			"title": "Volume entry",
			"type": "object",
			"properties": {
				"id": {
					"title": "Volume ID",
					"description": "For internal identification this volume. It must be unique in a service.",
					"$ref": "#/definitions/ID"
				},
				"dir": {
					"title": "Mount directory",
					"description": "The directory where this persistent volumes to be mount. It should be started with `/` (absolute).",
					"type": "string",
					"pattern": "^/."
				}
			},
			"additionalProperties": false,
			"required": [
				"id",
				"dir"
			]
		},
		"InitRules": {
			"title": "List of Initialization rules",
			"description": "Declare the container that should be run before starting this service. For example, hacking the Docker Hub image for fulfilling Zeabur. It is usually not useful for most cases.",
			"type": "array",
			"items": {
				"$ref": "#/definitions/InitRule"
			}
		},
		"InitRule": {
			"title": "Initialization rule",
			"description": "It is basically the container that runs before the service that can mutate the volumes and images.",
			"type": "object",
			"properties": {
				"id": {
					"title": "Rule ID",
					"description": "For internal identification this rule. It must be unique in a service.",
					"$ref": "#/definitions/ID"
				},
				"image": {
					"title": "Container image",
					"description": "The image of this init container for running commands. If not specified, the same image of the base service will be used.",
					"type": "string"
				},
				"command": {
					"title": "Container command",
					"description": "The command to be executed in this container. The variables (${VAR}) will be injected into this command.",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"volumes": {
					"title": "Mounted volumes",
					"description": "The volumes to mount at this init container for mutating, etc.",
					"$ref": "#/definitions/InitVolumeMounts"
				}
			},
			"additionalProperties": false,
			"required": [
				"id",
				"command"
			]
		},
		"InitVolumeMounts": {
			"title": "List of volumes to mount",
			"type": "array",
			"items": {
				"$ref": "#/definitions/InitVolumeMount"
			}
		},
		"InitVolumeMount": {
			"title": "Volume to mount at init container",
			"type": "object",
			"properties": {
				"id": {
					"title": "Volume ID",
					"description": "The volume ID declared in this service to mount at this init container.",
					"$ref": "#/definitions/ID"
				},
				"mountPath": {
					"title": "Mount path",
					"description": "Path within the container at which the volume should be mounted",
					"type": "string",
					"pattern": "^[^:]+$"
				},
				"subPath": {
					"title": "Subpath",
					"description": "Path within the volume from which the container's volume should be mounted. It is the Kubernetes concept, see https://stackoverflow.com/a/65399827 for details.",
					"type": "string",
					"default": ""
				}
			},
			"additionalProperties": false,
			"required": [
				"mountPath"
			]
		},
		"Configs": {
			"title": "List of Config",
			"description": "Declare the configurable file for a service. Useful when you want to change the configuration of a service without rebuilding the image.",
			"type": "array",
			"items": {
				"$ref": "#/definitions/ConfigItem"
			}
		},
		"ConfigItem": {
			"title": "Config item",
			"description": "Declare the file that allows user to customize in UI without rebuilding the image.",
			"type": "object",
			"properties": {
				"path": {
					"title": "File path",
					"description": "The path of this file. It should be started with `/` (absolute).",
					"type": "string",
					"pattern": "^/."
				},
				"template": {
					"title": "Content template",
					"description": "The content template (default content) of this file.",
					"type": "string"
				}
			},
			"additionalProperties": false,
			"required": [
				"path",
				"template"
			]
		}
	}
}
